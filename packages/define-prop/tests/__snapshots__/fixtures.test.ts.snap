// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > tests/fixtures/johnson-edition/basic.vue 1`] = `
"// basic.js
var basic = \`<script setup lang="ts">
const __MACROS_props = defineProps({
  qux: { type: String },
  foo: { type: String, default: 'foo' },
  bar: { default: 'bar', required: false },
  baz: { type: String, default: 'bar', required: false, ...{ validator: () => true } },
  unknownType: { type: Boolean, skipCheck: true },
  $bar: { default: 'bar', required: true },
  $baz: { default: 'baz' },
});

import { toRef as __MACROS_toRef } from "vue";
import { expectTypeOf } from 'expect-type'
import { type ComputedRef } from 'vue'

// defineProp()
const qux = __MACROS_toRef(__props, "qux")
expectTypeOf(qux).toEqualTypeOf<ComputedRef<string | undefined>>()

// defineProp(value)
const foo = __MACROS_toRef(__props, "foo")
expectTypeOf(foo).toEqualTypeOf<ComputedRef<string>>()

// defineProp(value, required)
const bar = __MACROS_toRef(__props, "bar")
expectTypeOf(bar).toEqualTypeOf<ComputedRef<string>>()

// defineProp(value, required, rest)
const baz = __MACROS_toRef(__props, "baz")
expectTypeOf(baz).toEqualTypeOf<ComputedRef<string>>()

// unknown type
const unknownType = __MACROS_toRef(__props, "unknownType")

const $bar = $(__MACROS_toRef(__props, "$bar"))
const $baz = $(__MACROS_toRef(__props, "$baz"))
</script>
\`;

export { basic as default };
"
`;

exports[`fixtures > tests/fixtures/kevin-edition/basic.vue 1`] = `
"// basic.js
var basic = \`<script setup lang="ts">
const __MACROS_props = defineProps({
  foo: { type: String },
  bar: { type: String, ...{
  type: String,
  required: true,
  default: 'bar',
} },
  baz: { type: [String, Number], ...{
  required: true,
  default: () => [1, 2, 3],
} },
  qux: { type: [String, Number] },
  quux: { type: Boolean, ...{ default: true } },
  quuz: null,
  unknownType: { type: Boolean, skipCheck: true },
  $foo: { default: 'foo', required: true },
  $bar: { default: 'bar' },
});

import { toRef as __MACROS_toRef } from "vue";
import { expectTypeOf } from 'expect-type'
import type { ComputedRef } from 'vue'
import type { Qux } from '../types'

// defineProp(prop_name)
const foo = __MACROS_toRef(__props, "foo")
expectTypeOf(foo).toEqualTypeOf<ComputedRef<string | undefined>>()

// defineProp(prop_name, options)
const bar = __MACROS_toRef(__props, "bar")
expectTypeOf(bar).toEqualTypeOf<ComputedRef<string>>()

// defineProp(prop_name, options)
const baz = __MACROS_toRef(__props, "baz")
expectTypeOf(baz).toEqualTypeOf<ComputedRef<string | number>>()

// defineProp(prop_name)
__MACROS_toRef(__props, "qux")

// defineProp(prop_name, options)
__MACROS_toRef(__props, "quux")

// infer prop name from variable name
// const prop_name = defineProp()
const quuz = __MACROS_toRef(__props, "quuz")
expectTypeOf(quuz).toEqualTypeOf<ComputedRef<unknown>>()
console.log(quuz)

const unknownType = __MACROS_toRef(__props, "unknownType")

// @ts-ignore reactivity transform
const $foo = $(__MACROS_toRef(__props, "$foo"))
const $bar = $(__MACROS_toRef(__props, "$bar"))
</script>
\`;

export { basic as default };
"
`;
